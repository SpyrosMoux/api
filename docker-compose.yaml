services:
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

#  api:
#    container_name: api
#    image: ghcr.io/spyrosmoux/api
#    build:
#      context: .
#    environment:
#      API_PORT: ${API_PORT}
#      GH_WEBHOOK_SECRET: ${GH_WEBHOOK_SECRET}
#      GH_TOKEN: ${GH_TOKEN}
#      RABBITMQ_HOST: ${RABBITMQ_HOST}
#      RABBITMQ_USER: ${RABBITMQ_USER}
#      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
#      RABBITMQ_PORT: ${RABBITMQ_PORT}
#      GIN_MODE: release
#    ports:
#      - "8080:8080"

  core-engine:
    container_name: core-engine
    image: ghcr.io/spyrosmoux/core-engine
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      GIN_MODE: release

  # Note: If you are assigning a custom name to your db service on the line below, make sure it does not contain underscores
  supertokens-db:
    image: 'postgres:latest'
    container_name: supertokens-db
    environment:
      POSTGRES_USER: supertokens_user
      POSTGRES_PASSWORD: somePassword
      POSTGRES_DB: supertokens
    ports:
      - 5432:5432
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'supertokens_user', '-d', 'supertokens']
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.0.2
    container_name: supertokens-core
    depends_on:
      supertokens-db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@supertokens-db:5432/supertokens"
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  api-db:
    image: 'postgres:latest'
    container_name: api-db
    environment:
      POSTGRES_USER: api
      POSTGRES_PASSWORD: api
      POSTGRES_DB: api
    ports:
      - 5433:5432
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'api', '-d', 'api']
      interval: 5s
      timeout: 5s
      retries: 5
